<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[百度地图API信息窗口label没有宽度问题]]></title>
    <url>%2F2018%2F03%2F20%2F%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI%E4%BF%A1%E6%81%AF%E7%AA%97%E5%8F%A3label%E6%B2%A1%E6%9C%89%E5%AE%BD%E5%BA%A6%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题在百度地图API添加标注信息后，label没有宽度： 原因是由于引入Bootstrop样式，和Bmap样式冲突； 解决方法重新定义样式 1#Bmap label&#123;max-width:none;&#125;]]></content>
      <categories>
        <category>Bmap</category>
      </categories>
      <tags>
        <tag>Bmap</tag>
        <tag>label</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Angular路由ng-controller中as的作用]]></title>
    <url>%2F2018%2F03%2F16%2FAngular%E8%B7%AF%E7%94%B1ng-controller%E4%B8%ADas%E7%9A%84%E4%BD%9C%E7%94%A8%2F</url>
    <content type="text"><![CDATA[作用域 $scope 会从父级controller创建的作用域进行原型继承，但又不会被覆盖,如下: 123456function firstCtrl($scope)&#123; $scope.value = "123456";&#125;；function secondCtrl($scope)&#123; $scope.value = "654321"；&#125; 123456&lt;div ng-controller = "firstCtrl"&gt; &#123;&#123;value&#125;&#125; &lt;div ng-controller = "secondCtrl"&gt; &#123;&#123;value&#125;&#125; &lt;/div&gt;&lt;/div&gt; 显示结果：123456&lt;div ng-controller = "firstCtrl"&gt; 123456 &lt;div ng-controller = "secondCtrl"&gt; 654321 &lt;/div&gt;&lt;/div&gt; 当secondCtrl中$scope.value被注释后：123456function firstCtrl($scope)&#123; $scope.value = "123456";&#125;；function secondCtrl($scope)&#123; // $scope.value = "654321"；&#125; 123456&lt;div ng-controller = "firstCtrl"&gt; 123456 &lt;div ng-controller = "secondCtrl"&gt; 123456 &lt;/div&gt;&lt;/div&gt; 在secondCtrl中没有定义value，但是会继承firstCtrl中的 value 显示“123456”；进行原型继承即意味着父作用域在子作用域的原型链上，这是JavaScript的特性；所以在angular 1.2以后有了controller as； 123456&lt;div ng-controller = "firstCtrl as first"&gt; &#123;&#123;first.value&#125;&#125; &lt;div ng-controller = "secondCtrl as second"&gt; &#123;&#123;second.value&#125;&#125; &lt;/div&gt;&lt;/div&gt;]]></content>
      <categories>
        <category>AngularJS</category>
      </categories>
      <tags>
        <tag>AngularJS</tag>
        <tag>route</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cookie的添加、获取、删除]]></title>
    <url>%2F2018%2F03%2F12%2FCookie%E7%9A%84%E6%B7%BB%E5%8A%A0%E3%80%81%E8%8E%B7%E5%8F%96%E3%80%81%E5%88%A0%E9%99%A4%2F</url>
    <content type="text"><![CDATA[常用的会话跟踪技术是Cookie与Session。Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，服务器端可以对其进行处理;session是存在服务器的,用于区分会话和不同用户的访问 设置Cookie1234567function SetCookie(name,value,expires)&#123; //cookie的名字、值、存储时间 var Days = expires? expires :30; //此 cookie 将被保存 expires(调用时自定义保存天数) 或者30 天 var exp = new Date(); //new Date("December 31, 9998"); exp.setTime(exp.getTime() + Days*24*60*60*1000); document.cookie = name + "="+ escape (value) + ";expires=" + exp.toGMTString();&#125; 获取Cookie1234function getCookie(name)&#123; //取cookies函数 var arr = document.cookie.match(new RegExp("(^| )"+name+"=([^;]*)(;|$)")); if(arr != null) return unescape(arr[2]); return null;&#125; 删除Cookie123456function delCookie(name)&#123; //删除cookie var exp = new Date(); exp.setTime(exp.getTime() - 1); var cval=getCookie(name); if(cval!=null) document.cookie= name + "="+cval+";expires="+exp.toGMTString();&#125; 用法123SetCookie('UserName','Admin',30);getCookie('UserName');delCookie('UserName');]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chrome自动填充input文本框,黄底蓝边框问题]]></title>
    <url>%2F2018%2F03%2F09%2FChrome%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85input%E6%96%87%E6%9C%AC%E6%A1%86-%E9%BB%84%E5%BA%95%E8%93%9D%E8%BE%B9%E6%A1%86%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[谷歌浏览器（Chrome）在开启自动填充账号密码功能时，input文本框会变成黄色背景，获取焦点时，变成蓝色边框，如下图： 这个背景是Chrome强制加的样式（-webkit-autofill）： 蓝色边框其实不是边框，是outline； outline （轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。 取消黄色背景？这个背景已经是加了!important，CSS样式处于最高优先级，所以替换是不可能的；可以用阴影（box-shadow）来覆盖这个效果。123.loginInput:-webkit-autofill &#123; -webkit-box-shadow: 0 0 0px 1000px white inset!important;&#125; 效果如下： 不过你也可以按自己的喜好，将white换成其他颜色。 取消蓝色边框outline直接设置获取焦点是为 0 或 none 就可以取消蓝色的轮廓了。123.loginInput:focus&#123; outline: 0;&#125;]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单搭建一个Node本地服务器]]></title>
    <url>%2F2018%2F03%2F09%2F%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AANode%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[用node搭建一个简单的本地http服务器很容易，功能相当于apache服务器； 1.首先安装nodejs服务（上篇文章有详细介绍，可移步查看）； 2.创建一个新目录，并新建 server.js（我在E:\wwwroot\NodeServer下创建了server.js文件）； 在 server.js 中写入如下代码：1234567891011var http=require('http');//开启服务var server=http.createServer(function(req,res)&#123; console.log('有客户端连接');//创建连接成功显示在后台 res.writeHeader(200,&#123; 'content-type' : 'text/html;charset="utf-8"' &#125;); res.write('这是正文部分');//显示给客户端 res.end();&#125;).listen(8888);console.log('服务器开启成功'); 这样，一个简单的node服务器就搭建完成了；Win + R 打开运行 输入 cmd 打开命令行工具， 3.在cmd控制台中cd切换进server.js所在的目录，然后执行node server.js命令当提示“服务器开启成功”时，在浏览器端输入127.0.0.1:8888；显示“这是正文内容”； 4.进阶-添加 index.html修改 server.js 中代码：（记得将 root 路径改为自己的文件路径）12345678910111213141516171819202122232425var http=require('http');var fs=require('fs'); //引入文件读取模块var root="E:/wwwroot/NodeServer/" //本地文件夹路径//开启服务，监听8888端口var server=http.createServer(function(req,res)&#123; console.log('有客户端连接'); //创建连接成功显示在后台 var url=req.url; var file = root+url; fs.readFile(file,function(err,data)&#123; if(err)&#123; res.writeHeader(404,&#123; 'content-type' : 'text/html;charset="utf-8"' &#125;); res.write('&lt;h1&gt;404错误&lt;/h1&gt;&lt;p&gt;你要找的页面不存在&lt;/p&gt;'); res.end(); &#125;else&#123; res.writeHeader(200,&#123; 'content-type' : 'text/html;charset="utf-8"' &#125;); res.write(data); //将index.html显示在客户端 res.end(); &#125; &#125;)&#125;).listen(8888);console.log('服务器开启成功'); 在该文件夹下再建一个 index.html，内容为“hello world”；然后以刚才的方式，命令行运行 node server.js；浏览器 输入 http://localhost:8888/index.html 即可看见 “hello world”；一个node服务器搭建完成。]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NodeJS安装及环境配置详细教程]]></title>
    <url>%2F2018%2F03%2F09%2FNodeJS%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[1.NodeJS安装包下载: 下载地址32位和64位的版本按需下载； 2.msi格式文件，双击安装然后一路 “next”,直到 finish； 3.检查是否安装成功win + R 打开“运行”窗口，输入“cmd”，回车；输入 ngde -v 回车、命令行输出node版本号，说明安装成功；新版的nodejs中集成了npm，所以npm也已经安装好了，输入 npm -v 回车查看版本号；]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于DIV高度100%无效]]></title>
    <url>%2F2018%2F03%2F08%2F%E5%85%B3%E4%BA%8EDIV%E9%AB%98%E5%BA%A6100%E6%97%A0%E6%95%88%2F</url>
    <content type="text"><![CDATA[给DIV设置height:100%时，DIV需要继承父级的高度，当DIV父级没有高度值时，DIV就继承为0；所以，要给她的父级也要设置高度值；如果要设置全屏类型网页，也要给body、html的高度为100%；]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你好_Hexo]]></title>
    <url>%2F2018%2F03%2F07%2F%E4%BD%A0%E5%A5%BD-Hexo%2F</url>
    <content type="text"><![CDATA[A First Level HeaderA Second Level HeaderNow is the time for all good men to come tothe aid of their country. This is just aregular paragraph. The quick brown fox jumped over the lazydog’s back. Header 3 This is a blockquote. This is the second paragraph in the blockquote. This is an H2 in a blockquote]]></content>
      <categories>
        <category>hello</category>
      </categories>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F06%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hello</category>
      </categories>
      <tags>
        <tag>hello</tag>
        <tag>test</tag>
      </tags>
  </entry>
</search>
